{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-810287cf4c3434b511fbc59dd9e447bbefac30f6",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/LoanSystemMVP.sol": "project/contracts/LoanSystemMVP.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "project/contracts/LoanSystemMVP.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n/**\r\n * @title CreditTrustToken interface\r\n * @notice Minimal interface to interact with the provided CreditTrustToken.sol\r\n */\r\ninterface ICreditTrustToken {\r\n    function tokenBalance(address user) external view returns (int256);\r\n    function isInitialized(address user) external view returns (bool);\r\n    function initializeUser(address user, uint256 initialTrustScore) external;\r\n    function mint(address user, uint256 amount) external;\r\n    function burn(address user, uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @title LoanSystemMVP\r\n * @notice Single-contract MVP that combines LoanManager, Escrow, and Liquidity Pool.\r\n *         - Lenders deposit ETH and receive pool shares\r\n *         - Admin funds loans from the pool, releases to borrowers, and settles repayments/defaults\r\n *         - Borrowers repay principal + interest; interest accrues to the pool\r\n *         - CreditTrustToken integrated: initialize borrower (if needed), mint on on-time repayment, burn on default\r\n */\r\ncontract LoanSystemMVP {\r\n    // ------------------\r\n    // Admin and external\r\n    // ------------------\r\n    address public admin;\r\n    ICreditTrustToken public ctt;\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == admin, \"Unauthorized: not admin\");\r\n        _;\r\n    }\r\n\r\n    // ------------------\r\n    // Liquidity (shares)\r\n    // ------------------\r\n    // Share accounting lets deposits and withdrawals track proportional interest.\r\n    uint256 public totalPool;      // Total ETH in pool (including interest)\r\n    uint256 public totalShares;    // Total shares issued\r\n    mapping(address => uint256) public sharesOf; // user => shares\r\n\r\n    // FTCToken\r\n    IERC20 public FTCToken;\r\n\r\n    // ------------------\r\n    // Loan lifecycle\r\n    // ------------------\r\n    enum State {\r\n        Created,\r\n        Funded,\r\n        Disbursed,\r\n        Repaid,\r\n        Defaulted\r\n    }\r\n\r\n    struct Loan {\r\n        address payable borrower;\r\n        uint256 principal;\r\n        uint256 aprBps;    // interest rate in basis points annualized (e.g., 1200 = 12%)\r\n        uint256 termDays;  // loan term in days\r\n        State state;\r\n        uint256 escrowBalance; // funds reserved for this loan before disbursement and while settling\r\n        uint256 dueDate;       // set at disbursement time: block.timestamp + termDays * 1 days\r\n    }\r\n\r\n    uint256 public nextId;\r\n    mapping(uint256 => Loan) public loans;\r\n\r\n    // ------------------\r\n    // Events\r\n    // ------------------\r\n    // Liquidity\r\n    event Deposited(address indexed user, uint256 amount, uint256 mintedShares);\r\n    event Withdrawn(address indexed user, uint256 amount, uint256 burnedShares);\r\n\r\n    // Loans\r\n    event LoanCreated(uint256 indexed id, address indexed borrower, uint256 principal, uint256 aprBps, uint256 termDays);\r\n    event LoanFunded(uint256 indexed id, uint256 amount);\r\n    event LoanDisbursed(uint256 indexed id, address indexed borrower, uint256 amount, uint256 dueDate);\r\n    event LoanRepaid(uint256 indexed id, address indexed borrower, uint256 principal, uint256 interest, bool onTime);\r\n    event LoanDefaulted(uint256 indexed id, address indexed borrower, uint256 principal);\r\n\r\n    // ------------------\r\n    // Constructor\r\n    // ------------------\r\n    constructor(address _admin, address _ctt, address _FTCToken) {\r\n        require(_admin != address(0), \"Invalid admin\");\r\n        require(_ctt != address(0), \"Invalid CTT\");\r\n        require(_FTCToken != address(0), \"Invalid FTCToken\");\r\n        admin = _admin;\r\n        ctt = ICreditTrustToken(_ctt);\r\n        FTCToken = IERC20(_FTCToken);\r\n        nextId = 1;\r\n    }\r\n\r\n    // ------------------\r\n    // Liquidity functions\r\n    // ------------------\r\n\r\n    /**\r\n     * @notice Deposit ETH to the pool and receive proportional shares.\r\n     */\r\n    function deposit() external payable {\r\n        require(msg.value > 0, \"Deposit must be > 0\");\r\n\r\n        uint256 mintedShares;\r\n        if (totalShares == 0 || totalPool == 0) {\r\n            // First deposit initializes shares 1:1 with amount\r\n            mintedShares = msg.value;\r\n        } else {\r\n            // Mint shares proportional to current pool value\r\n            mintedShares = (msg.value * totalShares) / totalPool;\r\n        }\r\n\r\n        totalPool += msg.value;\r\n        totalShares += mintedShares;\r\n        sharesOf[msg.sender] += mintedShares;\r\n\r\n        emit Deposited(msg.sender, msg.value, mintedShares);\r\n    }\r\n\r\n    /// @notice Deposit FTCT tokens to the pool and receive proportional shares.\r\n    function depositFTCT(uint256 amount) external {\r\n        require(amount > 0, \"Deposit must be > 0\");\r\n\r\n        // Pull tokens from the user into this contract\r\n        bool ok = FTCToken.transferFrom(msg.sender, address(this), amount);\r\n        require(ok, \"FTCT transfer failed\");\r\n\r\n        uint256 mintedShares;\r\n        if (totalShares == 0 || totalPool == 0) {\r\n            // First deposit initializes shares 1:1 with amount\r\n            mintedShares = amount;\r\n        } else {\r\n            // Mint shares proportional to current pool value\r\n            mintedShares = (amount * totalShares) / totalPool;\r\n        }\r\n\r\n        totalPool += amount;\r\n        totalShares += mintedShares;\r\n        sharesOf[msg.sender] += mintedShares;\r\n\r\n        emit Deposited(msg.sender, amount, mintedShares);\r\n    }\r\n\r\n    /**\r\n     * @notice Withdraw ETH by redeeming shares. Amount is proportional to pool value.\r\n     * @param shareAmount Number of shares to redeem.\r\n     */\r\n    function withdraw(uint256 shareAmount) external {\r\n        require(shareAmount > 0, \"shareAmount must be > 0\");\r\n        require(sharesOf[msg.sender] >= shareAmount, \"Insufficient shares\");\r\n        require(totalShares > 0, \"No shares\");\r\n\r\n        // User receives amount = shareAmount / totalShares * totalPool\r\n        uint256 amount = (shareAmount * totalPool) / totalShares;\r\n\r\n        // Update accounting\r\n        sharesOf[msg.sender] -= shareAmount;\r\n        totalShares -= shareAmount;\r\n        totalPool -= amount;\r\n\r\n        // Transfer\r\n        (bool ok, ) = payable(msg.sender).call{value: amount}(\"\");\r\n        require(ok, \"Withdraw transfer failed\");\r\n\r\n        emit Withdrawn(msg.sender, amount, shareAmount);\r\n    }\r\n\r\n    function withdrawFTCT(uint256 shareAmount) external {\r\n        require(shareAmount > 0, \"shareAmount must be > 0\");\r\n        require(sharesOf[msg.sender] >= shareAmount, \"Insufficient shares\");\r\n        require(totalShares > 0, \"No shares\");\r\n\r\n        // User receives amount = shareAmount / totalShares * totalPool\r\n        uint256 amount = (shareAmount * totalPool) / totalShares;\r\n\r\n        // Update accounting\r\n        sharesOf[msg.sender] -= shareAmount;\r\n        totalShares -= shareAmount;\r\n        totalPool -= amount;\r\n\r\n        // Transfer\r\n        require(FTCToken.transfer(msg.sender, amount), \"Token transfer failed\");\r\n\r\n        emit Withdrawn(msg.sender, amount, shareAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice Accept direct top-ups to the pool (treated as donations that increase pool without minting shares).\r\n     */\r\n    receive() external payable {\r\n        totalPool += msg.value;\r\n        // No event for simplicity; donors don't receive shares.\r\n    }\r\n\r\n    // ------------------\r\n    // Loan functions\r\n    // ------------------\r\n\r\n    /**\r\n     * @notice Create a loan entry. Optionally initializes the borrower's CreditTrustToken profile at zero.\r\n     * @dev Returns the loan id.\r\n     */\r\n    function createLoan(address payable borrower, uint256 amount, uint256 aprBps, uint256 termDays)\r\n        external\r\n        onlyAdmin\r\n        returns (uint256 id)\r\n    {\r\n        require(borrower != address(0), \"Invalid borrower\");\r\n        require(amount > 0, \"Amount must be > 0\");\r\n        require(aprBps > 0, \"aprBps must be > 0\");\r\n        require(termDays > 0, \"termDays must be > 0\");\r\n\r\n        id = nextId++;\r\n        loans[id] = Loan({\r\n            borrower: borrower,\r\n            principal: amount,\r\n            aprBps: aprBps,\r\n            termDays: termDays,\r\n            state: State.Created,\r\n            escrowBalance: 0,\r\n            dueDate: 0\r\n        });\r\n\r\n        // Initialize borrower in CTT if not already\r\n        if (!ctt.isInitialized(borrower)) {\r\n            ctt.initializeUser(borrower, 0);\r\n        }\r\n\r\n        emit LoanCreated(id, borrower, amount, aprBps, termDays);\r\n    }\r\n\r\n    /**\r\n     * @notice Move pool funds to loan escrow reserve. Only admin.\r\n     * @dev Ensures pool has sufficient free liquidity.\r\n     */\r\n    function markFunded(uint256 id) external onlyAdmin {\r\n        Loan storage ln = loans[id];\r\n        require(ln.state == State.Created, \"Invalid state\");\r\n        require(totalPool >= ln.principal, \"Insufficient pool\");\r\n\r\n        // Reserve funds for loan in escrow\r\n        ln.escrowBalance += ln.principal;\r\n        totalPool -= ln.principal; // funds reserved out of pool\r\n\r\n        ln.state = State.Funded;\r\n        emit LoanFunded(id, ln.principal);\r\n    }\r\n\r\n    /**\r\n     * @notice Release escrowed funds to borrower. Sets due date and moves state to Disbursed. Only admin.\r\n     */\r\n    function markDisbursed(uint256 id) external onlyAdmin {\r\n        Loan storage ln = loans[id];\r\n        require(ln.state == State.Funded, \"Invalid state\");\r\n        require(ln.escrowBalance == ln.principal, \"Escrow mismatch\");\r\n\r\n        ln.state = State.Disbursed;\r\n        ln.dueDate = block.timestamp + (ln.termDays * 1 days);\r\n\r\n        // Transfer principal to borrower\r\n        uint256 amount = ln.principal;\r\n        ln.escrowBalance = 0;\r\n\r\n        (bool ok, ) = ln.borrower.call{value: amount}(\"\");\r\n        require(ok, \"Borrower transfer failed\");\r\n\r\n        emit LoanDisbursed(id, ln.borrower, amount, ln.dueDate);\r\n    }\r\n\r\n    function markDisbursedFTCT(uint256 id) external onlyAdmin {\r\n        Loan storage ln = loans[id];\r\n        require(ln.state == State.Funded, \"Invalid state\");\r\n        require(ln.escrowBalance == ln.principal, \"Escrow mismatch\");\r\n\r\n        ln.state = State.Disbursed;\r\n        ln.dueDate = block.timestamp + (ln.termDays * 1 days);\r\n\r\n        // Transfer principal to borrower\r\n        uint256 amount = ln.principal;\r\n        ln.escrowBalance = 0;\r\n\r\n        require(FTCToken.transfer(ln.borrower, amount), \"Token transfer failed\");\r\n\r\n        emit LoanDisbursed(id, ln.borrower, amount, ln.dueDate);\r\n    }\r\n\r\n    /**\r\n     * @notice Borrower repays the loan by sending principal + interest. Anyone can call, msg.value must cover due amount.\r\n     * @param id Loan id.\r\n     * @param onTime Whether this repayment counts as on-time for reputation purposes.\r\n     *               You can pass `onTime = (block.timestamp <= dueDate)` off-chain if desired.\r\n     */\r\n    function markRepaid(uint256 id, bool onTime) external payable {\r\n        Loan storage ln = loans[id];\r\n        require(ln.state == State.Disbursed, \"Invalid state\");\r\n\r\n        // Calculate simple interest: principal * aprBps * termDays / (10000 * 365)\r\n        uint256 interest = _calcInterest(ln.principal, ln.aprBps, ln.termDays);\r\n        uint256 totalDue = ln.principal + interest;\r\n        require(msg.value >= totalDue, \"Insufficient repayment\");\r\n\r\n        ln.state = State.Repaid;\r\n\r\n        // Settlement: interest goes to pool, principal closes loan.\r\n        // Here, we add interest to pool (benefits all lenders via share pricing).\r\n        totalPool += totalDue;\r\n\r\n        // Excess repayment (if any) returned to sender\r\n        uint256 excess = msg.value - totalDue;\r\n        if (excess > 0) {\r\n            (bool refundOk, ) = payable(msg.sender).call{value: excess}(\"\");\r\n            require(refundOk, \"Excess refund failed\");\r\n        }\r\n\r\n        // Reputation update via CreditTrustToken\r\n        // MVP rule: mint principal amount on on-time repayment; mint half if late.\r\n        uint256 trustMint = onTime ? ln.principal : (ln.principal / 2);\r\n        if (trustMint > 0) {\r\n            ctt.mint(ln.borrower, trustMint);\r\n        }\r\n\r\n        emit LoanRepaid(id, ln.borrower, ln.principal, interest, onTime);\r\n    }\r\n\r\n    function markRepaidFTCT(uint256 id, bool onTime, uint256 amount) external {\r\n        Loan storage ln = loans[id];\r\n        require(ln.state == State.Disbursed, \"Invalid state\");\r\n\r\n        uint256 interest = _calcInterest(ln.principal, ln.aprBps, ln.termDays);\r\n        uint256 totalDue = ln.principal + interest;\r\n        require(amount >= totalDue, \"Insufficient repayment\");\r\n\r\n        // Transfer tokens from borrower\r\n        require(FTCToken.transferFrom(msg.sender, address(this), totalDue), \"Repayment transfer failed\");\r\n\r\n        ln.state = State.Repaid;\r\n        totalPool += totalDue;\r\n\r\n        uint256 trustMint = onTime ? ln.principal : (ln.principal / 2);\r\n        if (trustMint > 0) ctt.mint(ln.borrower, trustMint);\r\n\r\n        emit LoanRepaid(id, ln.borrower, ln.principal, interest, onTime);\r\n    }\r\n\r\n    /**\r\n     * @notice Declare loan default. Only admin.\r\n     * @dev No further transfers; reputation penalty applied. Any residual escrowBalance (should be zero post-disbursement).\r\n     */\r\n    function markDefaulted(uint256 id) external onlyAdmin {\r\n        Loan storage ln = loans[id];\r\n        require(ln.state == State.Disbursed, \"Invalid state\");\r\n\r\n        ln.state = State.Defaulted;\r\n\r\n        // Reputation penalty via CreditTrustToken\r\n        // MVP rule: burn principal amount on default.\r\n        ctt.burn(ln.borrower, ln.principal);\r\n\r\n        emit LoanDefaulted(id, ln.borrower, ln.principal);\r\n    }\r\n\r\n    // ------------------\r\n    // Internal helpers\r\n    // ------------------\r\n\r\n    function _calcInterest(uint256 principal, uint256 aprBps, uint256 termDays) public pure returns (uint256) {\r\n        // Simple interest (non-compounding): principal * aprBps * termDays / (10000 * 365)\r\n        // Note: Uses integer division; acceptable for MVP.\r\n        return (principal * aprBps * termDays) / (10000 * 365);\r\n    }\r\n\r\n    // ------------------\r\n    // Admin utilities\r\n    // ------------------\r\n\r\n    /**\r\n     * @notice Rotate admin. Only admin.\r\n     */\r\n    function setAdmin(address newAdmin) external onlyAdmin {\r\n        require(newAdmin != address(0), \"Invalid admin\");\r\n        admin = newAdmin;\r\n    }\r\n}"
      }
    }
  }
}